// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/interface/repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "cs-api/db/model"
	iface "cs-api/pkg/interface"
	types "cs-api/pkg/types"
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// AcceptRoom mocks base method.
func (m *MockIRepository) AcceptRoom(ctx context.Context, arg model.AcceptRoomParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptRoom", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptRoom indicates an expected call of AcceptRoom.
func (mr *MockIRepositoryMockRecorder) AcceptRoom(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptRoom", reflect.TypeOf((*MockIRepository)(nil).AcceptRoom), ctx, arg)
}

// CheckFastReplyCategory mocks base method.
func (m *MockIRepository) CheckFastReplyCategory(ctx context.Context, id int64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFastReplyCategory", ctx, id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFastReplyCategory indicates an expected call of CheckFastReplyCategory.
func (mr *MockIRepositoryMockRecorder) CheckFastReplyCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFastReplyCategory", reflect.TypeOf((*MockIRepository)(nil).CheckFastReplyCategory), ctx, id)
}

// CloseRoom mocks base method.
func (m *MockIRepository) CloseRoom(ctx context.Context, arg model.CloseRoomParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseRoom", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseRoom indicates an expected call of CloseRoom.
func (mr *MockIRepositoryMockRecorder) CloseRoom(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRoom", reflect.TypeOf((*MockIRepository)(nil).CloseRoom), ctx, arg)
}

// ConstantSeeder mocks base method.
func (m *MockIRepository) ConstantSeeder(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstantSeeder", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConstantSeeder indicates an expected call of ConstantSeeder.
func (mr *MockIRepositoryMockRecorder) ConstantSeeder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstantSeeder", reflect.TypeOf((*MockIRepository)(nil).ConstantSeeder), ctx)
}

// CountClosedRoomByTag mocks base method.
func (m *MockIRepository) CountClosedRoomByTag(ctx context.Context, arg model.CountClosedRoomByTagParams) ([]model.CountClosedRoomByTagRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountClosedRoomByTag", ctx, arg)
	ret0, _ := ret[0].([]model.CountClosedRoomByTagRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountClosedRoomByTag indicates an expected call of CountClosedRoomByTag.
func (mr *MockIRepositoryMockRecorder) CountClosedRoomByTag(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountClosedRoomByTag", reflect.TypeOf((*MockIRepository)(nil).CountClosedRoomByTag), ctx, arg)
}

// CountDailyRoomByMember mocks base method.
func (m *MockIRepository) CountDailyRoomByMember(ctx context.Context, arg model.CountDailyRoomByMemberParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDailyRoomByMember", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDailyRoomByMember indicates an expected call of CountDailyRoomByMember.
func (mr *MockIRepositoryMockRecorder) CountDailyRoomByMember(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDailyRoomByMember", reflect.TypeOf((*MockIRepository)(nil).CountDailyRoomByMember), ctx, arg)
}

// CountListFAQ mocks base method.
func (m *MockIRepository) CountListFAQ(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountListFAQ", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountListFAQ indicates an expected call of CountListFAQ.
func (mr *MockIRepositoryMockRecorder) CountListFAQ(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountListFAQ", reflect.TypeOf((*MockIRepository)(nil).CountListFAQ), ctx)
}

// CountListFastReply mocks base method.
func (m *MockIRepository) CountListFastReply(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountListFastReply", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountListFastReply indicates an expected call of CountListFastReply.
func (mr *MockIRepositoryMockRecorder) CountListFastReply(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountListFastReply", reflect.TypeOf((*MockIRepository)(nil).CountListFastReply), ctx)
}

// CountListMember mocks base method.
func (m *MockIRepository) CountListMember(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountListMember", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountListMember indicates an expected call of CountListMember.
func (mr *MockIRepositoryMockRecorder) CountListMember(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountListMember", reflect.TypeOf((*MockIRepository)(nil).CountListMember), ctx)
}

// CountListMessage mocks base method.
func (m *MockIRepository) CountListMessage(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountListMessage", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountListMessage indicates an expected call of CountListMessage.
func (mr *MockIRepositoryMockRecorder) CountListMessage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountListMessage", reflect.TypeOf((*MockIRepository)(nil).CountListMessage), ctx)
}

// CountListNotice mocks base method.
func (m *MockIRepository) CountListNotice(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountListNotice", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountListNotice indicates an expected call of CountListNotice.
func (mr *MockIRepositoryMockRecorder) CountListNotice(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountListNotice", reflect.TypeOf((*MockIRepository)(nil).CountListNotice), ctx)
}

// CountListRemind mocks base method.
func (m *MockIRepository) CountListRemind(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountListRemind", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountListRemind indicates an expected call of CountListRemind.
func (mr *MockIRepositoryMockRecorder) CountListRemind(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountListRemind", reflect.TypeOf((*MockIRepository)(nil).CountListRemind), ctx)
}

// CountListRole mocks base method.
func (m *MockIRepository) CountListRole(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountListRole", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountListRole indicates an expected call of CountListRole.
func (mr *MockIRepositoryMockRecorder) CountListRole(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountListRole", reflect.TypeOf((*MockIRepository)(nil).CountListRole), ctx)
}

// CountListRoom mocks base method.
func (m *MockIRepository) CountListRoom(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountListRoom", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountListRoom indicates an expected call of CountListRoom.
func (mr *MockIRepositoryMockRecorder) CountListRoom(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountListRoom", reflect.TypeOf((*MockIRepository)(nil).CountListRoom), ctx)
}

// CountListStaff mocks base method.
func (m *MockIRepository) CountListStaff(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountListStaff", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountListStaff indicates an expected call of CountListStaff.
func (mr *MockIRepositoryMockRecorder) CountListStaff(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountListStaff", reflect.TypeOf((*MockIRepository)(nil).CountListStaff), ctx)
}

// CountListStaffRoom mocks base method.
func (m *MockIRepository) CountListStaffRoom(ctx context.Context, status types.RoomStatus) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountListStaffRoom", ctx, status)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountListStaffRoom indicates an expected call of CountListStaffRoom.
func (mr *MockIRepositoryMockRecorder) CountListStaffRoom(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountListStaffRoom", reflect.TypeOf((*MockIRepository)(nil).CountListStaffRoom), ctx, status)
}

// CountListTag mocks base method.
func (m *MockIRepository) CountListTag(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountListTag", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountListTag indicates an expected call of CountListTag.
func (mr *MockIRepositoryMockRecorder) CountListTag(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountListTag", reflect.TypeOf((*MockIRepository)(nil).CountListTag), ctx)
}

// CreateFAQ mocks base method.
func (m *MockIRepository) CreateFAQ(ctx context.Context, arg model.CreateFAQParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFAQ", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFAQ indicates an expected call of CreateFAQ.
func (mr *MockIRepositoryMockRecorder) CreateFAQ(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFAQ", reflect.TypeOf((*MockIRepository)(nil).CreateFAQ), ctx, arg)
}

// CreateFastReply mocks base method.
func (m *MockIRepository) CreateFastReply(ctx context.Context, arg model.CreateFastReplyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFastReply", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFastReply indicates an expected call of CreateFastReply.
func (mr *MockIRepositoryMockRecorder) CreateFastReply(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFastReply", reflect.TypeOf((*MockIRepository)(nil).CreateFastReply), ctx, arg)
}

// CreateFastReplyCategory mocks base method.
func (m *MockIRepository) CreateFastReplyCategory(ctx context.Context, arg model.CreateFastReplyCategoryParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFastReplyCategory", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFastReplyCategory indicates an expected call of CreateFastReplyCategory.
func (mr *MockIRepositoryMockRecorder) CreateFastReplyCategory(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFastReplyCategory", reflect.TypeOf((*MockIRepository)(nil).CreateFastReplyCategory), ctx, arg)
}

// CreateMember mocks base method.
func (m *MockIRepository) CreateMember(ctx context.Context, arg model.CreateMemberParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockIRepositoryMockRecorder) CreateMember(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockIRepository)(nil).CreateMember), ctx, arg)
}

// CreateMessage mocks base method.
func (m *MockIRepository) CreateMessage(ctx context.Context, arg model.CreateMessageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockIRepositoryMockRecorder) CreateMessage(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockIRepository)(nil).CreateMessage), ctx, arg)
}

// CreateNotice mocks base method.
func (m *MockIRepository) CreateNotice(ctx context.Context, arg model.CreateNoticeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotice", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNotice indicates an expected call of CreateNotice.
func (mr *MockIRepositoryMockRecorder) CreateNotice(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotice", reflect.TypeOf((*MockIRepository)(nil).CreateNotice), ctx, arg)
}

// CreateRemind mocks base method.
func (m *MockIRepository) CreateRemind(ctx context.Context, arg model.CreateRemindParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemind", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRemind indicates an expected call of CreateRemind.
func (mr *MockIRepositoryMockRecorder) CreateRemind(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemind", reflect.TypeOf((*MockIRepository)(nil).CreateRemind), ctx, arg)
}

// CreateReportDailyGuest mocks base method.
func (m *MockIRepository) CreateReportDailyGuest(ctx context.Context, arg model.CreateReportDailyGuestParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReportDailyGuest", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReportDailyGuest indicates an expected call of CreateReportDailyGuest.
func (mr *MockIRepositoryMockRecorder) CreateReportDailyGuest(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReportDailyGuest", reflect.TypeOf((*MockIRepository)(nil).CreateReportDailyGuest), ctx, arg)
}

// CreateReportDailyTag mocks base method.
func (m *MockIRepository) CreateReportDailyTag(ctx context.Context, arg model.CreateReportDailyTagParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReportDailyTag", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReportDailyTag indicates an expected call of CreateReportDailyTag.
func (mr *MockIRepositoryMockRecorder) CreateReportDailyTag(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReportDailyTag", reflect.TypeOf((*MockIRepository)(nil).CreateReportDailyTag), ctx, arg)
}

// CreateRole mocks base method.
func (m *MockIRepository) CreateRole(ctx context.Context, arg model.CreateRoleParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockIRepositoryMockRecorder) CreateRole(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockIRepository)(nil).CreateRole), ctx, arg)
}

// CreateRoom mocks base method.
func (m *MockIRepository) CreateRoom(ctx context.Context, arg model.CreateRoomParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockIRepositoryMockRecorder) CreateRoom(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockIRepository)(nil).CreateRoom), ctx, arg)
}

// CreateStaff mocks base method.
func (m *MockIRepository) CreateStaff(ctx context.Context, arg model.CreateStaffParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStaff", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStaff indicates an expected call of CreateStaff.
func (mr *MockIRepositoryMockRecorder) CreateStaff(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStaff", reflect.TypeOf((*MockIRepository)(nil).CreateStaff), ctx, arg)
}

// CreateTag mocks base method.
func (m *MockIRepository) CreateTag(ctx context.Context, arg model.CreateTagParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockIRepositoryMockRecorder) CreateTag(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockIRepository)(nil).CreateTag), ctx, arg)
}

// DeleteFAQ mocks base method.
func (m *MockIRepository) DeleteFAQ(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFAQ", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFAQ indicates an expected call of DeleteFAQ.
func (mr *MockIRepositoryMockRecorder) DeleteFAQ(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFAQ", reflect.TypeOf((*MockIRepository)(nil).DeleteFAQ), ctx, id)
}

// DeleteFastReply mocks base method.
func (m *MockIRepository) DeleteFastReply(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFastReply", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFastReply indicates an expected call of DeleteFastReply.
func (mr *MockIRepositoryMockRecorder) DeleteFastReply(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFastReply", reflect.TypeOf((*MockIRepository)(nil).DeleteFastReply), ctx, id)
}

// DeleteNotice mocks base method.
func (m *MockIRepository) DeleteNotice(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotice", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotice indicates an expected call of DeleteNotice.
func (mr *MockIRepositoryMockRecorder) DeleteNotice(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotice", reflect.TypeOf((*MockIRepository)(nil).DeleteNotice), ctx, id)
}

// DeleteRemind mocks base method.
func (m *MockIRepository) DeleteRemind(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRemind", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRemind indicates an expected call of DeleteRemind.
func (mr *MockIRepositoryMockRecorder) DeleteRemind(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemind", reflect.TypeOf((*MockIRepository)(nil).DeleteRemind), ctx, id)
}

// DeleteReportDailyGuest mocks base method.
func (m *MockIRepository) DeleteReportDailyGuest(ctx context.Context, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReportDailyGuest", ctx, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReportDailyGuest indicates an expected call of DeleteReportDailyGuest.
func (mr *MockIRepositoryMockRecorder) DeleteReportDailyGuest(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReportDailyGuest", reflect.TypeOf((*MockIRepository)(nil).DeleteReportDailyGuest), ctx, date)
}

// DeleteReportDailyTag mocks base method.
func (m *MockIRepository) DeleteReportDailyTag(ctx context.Context, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReportDailyTag", ctx, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReportDailyTag indicates an expected call of DeleteReportDailyTag.
func (mr *MockIRepositoryMockRecorder) DeleteReportDailyTag(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReportDailyTag", reflect.TypeOf((*MockIRepository)(nil).DeleteReportDailyTag), ctx, date)
}

// DeleteRole mocks base method.
func (m *MockIRepository) DeleteRole(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockIRepositoryMockRecorder) DeleteRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockIRepository)(nil).DeleteRole), ctx, id)
}

// DeleteStaff mocks base method.
func (m *MockIRepository) DeleteStaff(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStaff", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStaff indicates an expected call of DeleteStaff.
func (mr *MockIRepositoryMockRecorder) DeleteStaff(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStaff", reflect.TypeOf((*MockIRepository)(nil).DeleteStaff), ctx, id)
}

// DeleteTag mocks base method.
func (m *MockIRepository) DeleteTag(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockIRepositoryMockRecorder) DeleteTag(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockIRepository)(nil).DeleteTag), ctx, id)
}

// GetAllAvailableFastReply mocks base method.
func (m *MockIRepository) GetAllAvailableFastReply(ctx context.Context) ([]model.GetAllAvailableFastReplyRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAvailableFastReply", ctx)
	ret0, _ := ret[0].([]model.GetAllAvailableFastReplyRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAvailableFastReply indicates an expected call of GetAllAvailableFastReply.
func (mr *MockIRepositoryMockRecorder) GetAllAvailableFastReply(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAvailableFastReply", reflect.TypeOf((*MockIRepository)(nil).GetAllAvailableFastReply), ctx)
}

// GetAllRoles mocks base method.
func (m *MockIRepository) GetAllRoles(ctx context.Context) ([]model.GetAllRolesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles", ctx)
	ret0, _ := ret[0].([]model.GetAllRolesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoles indicates an expected call of GetAllRoles.
func (mr *MockIRepositoryMockRecorder) GetAllRoles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockIRepository)(nil).GetAllRoles), ctx)
}

// GetAllStaffs mocks base method.
func (m *MockIRepository) GetAllStaffs(ctx context.Context) ([]model.GetAllStaffsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStaffs", ctx)
	ret0, _ := ret[0].([]model.GetAllStaffsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStaffs indicates an expected call of GetAllStaffs.
func (mr *MockIRepositoryMockRecorder) GetAllStaffs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStaffs", reflect.TypeOf((*MockIRepository)(nil).GetAllStaffs), ctx)
}

// GetAllTag mocks base method.
func (m *MockIRepository) GetAllTag(ctx context.Context) ([]model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTag", ctx)
	ret0, _ := ret[0].([]model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTag indicates an expected call of GetAllTag.
func (mr *MockIRepositoryMockRecorder) GetAllTag(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTag", reflect.TypeOf((*MockIRepository)(nil).GetAllTag), ctx)
}

// GetCsConfig mocks base method.
func (m *MockIRepository) GetCsConfig(ctx context.Context) (model.Constant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCsConfig", ctx)
	ret0, _ := ret[0].(model.Constant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCsConfig indicates an expected call of GetCsConfig.
func (mr *MockIRepositoryMockRecorder) GetCsConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCsConfig", reflect.TypeOf((*MockIRepository)(nil).GetCsConfig), ctx)
}

// GetFAQ mocks base method.
func (m *MockIRepository) GetFAQ(ctx context.Context, id int64) (model.GetFAQRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFAQ", ctx, id)
	ret0, _ := ret[0].(model.GetFAQRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFAQ indicates an expected call of GetFAQ.
func (mr *MockIRepositoryMockRecorder) GetFAQ(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFAQ", reflect.TypeOf((*MockIRepository)(nil).GetFAQ), ctx, id)
}

// GetFastReply mocks base method.
func (m *MockIRepository) GetFastReply(ctx context.Context, id int64) (model.FastReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFastReply", ctx, id)
	ret0, _ := ret[0].(model.FastReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFastReply indicates an expected call of GetFastReply.
func (mr *MockIRepositoryMockRecorder) GetFastReply(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFastReply", reflect.TypeOf((*MockIRepository)(nil).GetFastReply), ctx, id)
}

// GetGuestMember mocks base method.
func (m *MockIRepository) GetGuestMember(ctx context.Context, deviceID string) (model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuestMember", ctx, deviceID)
	ret0, _ := ret[0].(model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuestMember indicates an expected call of GetGuestMember.
func (mr *MockIRepositoryMockRecorder) GetGuestMember(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuestMember", reflect.TypeOf((*MockIRepository)(nil).GetGuestMember), ctx, deviceID)
}

// GetLatestNotice mocks base method.
func (m *MockIRepository) GetLatestNotice(ctx context.Context) (model.GetLatestNoticeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestNotice", ctx)
	ret0, _ := ret[0].(model.GetLatestNoticeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestNotice indicates an expected call of GetLatestNotice.
func (mr *MockIRepositoryMockRecorder) GetLatestNotice(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestNotice", reflect.TypeOf((*MockIRepository)(nil).GetLatestNotice), ctx)
}

// GetMemberAvailableRoom mocks base method.
func (m *MockIRepository) GetMemberAvailableRoom(ctx context.Context, memberID int64) (model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberAvailableRoom", ctx, memberID)
	ret0, _ := ret[0].(model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberAvailableRoom indicates an expected call of GetMemberAvailableRoom.
func (mr *MockIRepositoryMockRecorder) GetMemberAvailableRoom(ctx, memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberAvailableRoom", reflect.TypeOf((*MockIRepository)(nil).GetMemberAvailableRoom), ctx, memberID)
}

// GetNormalMember mocks base method.
func (m *MockIRepository) GetNormalMember(ctx context.Context, name string) (model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNormalMember", ctx, name)
	ret0, _ := ret[0].(model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNormalMember indicates an expected call of GetNormalMember.
func (mr *MockIRepositoryMockRecorder) GetNormalMember(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNormalMember", reflect.TypeOf((*MockIRepository)(nil).GetNormalMember), ctx, name)
}

// GetNotice mocks base method.
func (m *MockIRepository) GetNotice(ctx context.Context, id int64) (model.Notice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotice", ctx, id)
	ret0, _ := ret[0].(model.Notice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotice indicates an expected call of GetNotice.
func (mr *MockIRepositoryMockRecorder) GetNotice(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotice", reflect.TypeOf((*MockIRepository)(nil).GetNotice), ctx, id)
}

// GetOnlineStatus mocks base method.
func (m *MockIRepository) GetOnlineStatus(ctx context.Context, id int64) (types.MemberOnlineStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineStatus", ctx, id)
	ret0, _ := ret[0].(types.MemberOnlineStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineStatus indicates an expected call of GetOnlineStatus.
func (mr *MockIRepositoryMockRecorder) GetOnlineStatus(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineStatus", reflect.TypeOf((*MockIRepository)(nil).GetOnlineStatus), ctx, id)
}

// GetRemind mocks base method.
func (m *MockIRepository) GetRemind(ctx context.Context, id int64) (model.Remind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemind", ctx, id)
	ret0, _ := ret[0].(model.Remind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemind indicates an expected call of GetRemind.
func (mr *MockIRepositoryMockRecorder) GetRemind(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemind", reflect.TypeOf((*MockIRepository)(nil).GetRemind), ctx, id)
}

// GetRole mocks base method.
func (m *MockIRepository) GetRole(ctx context.Context, id int64) (model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, id)
	ret0, _ := ret[0].(model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockIRepositoryMockRecorder) GetRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockIRepository)(nil).GetRole), ctx, id)
}

// GetRoom mocks base method.
func (m *MockIRepository) GetRoom(ctx context.Context, id int64) (model.GetRoomRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoom", ctx, id)
	ret0, _ := ret[0].(model.GetRoomRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoom indicates an expected call of GetRoom.
func (mr *MockIRepositoryMockRecorder) GetRoom(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoom", reflect.TypeOf((*MockIRepository)(nil).GetRoom), ctx, id)
}

// GetStaff mocks base method.
func (m *MockIRepository) GetStaff(ctx context.Context, id int64) (model.GetStaffRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaff", ctx, id)
	ret0, _ := ret[0].(model.GetStaffRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaff indicates an expected call of GetStaff.
func (mr *MockIRepositoryMockRecorder) GetStaff(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaff", reflect.TypeOf((*MockIRepository)(nil).GetStaff), ctx, id)
}

// GetStaffCountByRoleId mocks base method.
func (m *MockIRepository) GetStaffCountByRoleId(ctx context.Context, roleID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaffCountByRoleId", ctx, roleID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaffCountByRoleId indicates an expected call of GetStaffCountByRoleId.
func (mr *MockIRepositoryMockRecorder) GetStaffCountByRoleId(ctx, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaffCountByRoleId", reflect.TypeOf((*MockIRepository)(nil).GetStaffCountByRoleId), ctx, roleID)
}

// GetStaffRoom mocks base method.
func (m *MockIRepository) GetStaffRoom(ctx context.Context, staffID int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaffRoom", ctx, staffID)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaffRoom indicates an expected call of GetStaffRoom.
func (mr *MockIRepositoryMockRecorder) GetStaffRoom(ctx, staffID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaffRoom", reflect.TypeOf((*MockIRepository)(nil).GetStaffRoom), ctx, staffID)
}

// GetTag mocks base method.
func (m *MockIRepository) GetTag(ctx context.Context, id int64) (model.GetTagRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", ctx, id)
	ret0, _ := ret[0].(model.GetTagRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockIRepositoryMockRecorder) GetTag(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockIRepository)(nil).GetTag), ctx, id)
}

// ListActiveRemind mocks base method.
func (m *MockIRepository) ListActiveRemind(ctx context.Context) ([]model.ListActiveRemindRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveRemind", ctx)
	ret0, _ := ret[0].([]model.ListActiveRemindRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveRemind indicates an expected call of ListActiveRemind.
func (mr *MockIRepositoryMockRecorder) ListActiveRemind(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveRemind", reflect.TypeOf((*MockIRepository)(nil).ListActiveRemind), ctx)
}

// ListAvailableFAQ mocks base method.
func (m *MockIRepository) ListAvailableFAQ(ctx context.Context) ([]model.ListAvailableFAQRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableFAQ", ctx)
	ret0, _ := ret[0].([]model.ListAvailableFAQRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableFAQ indicates an expected call of ListAvailableFAQ.
func (mr *MockIRepositoryMockRecorder) ListAvailableFAQ(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableFAQ", reflect.TypeOf((*MockIRepository)(nil).ListAvailableFAQ), ctx)
}

// ListAvailableStaff mocks base method.
func (m *MockIRepository) ListAvailableStaff(ctx context.Context, id int64) ([]model.ListAvailableStaffRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableStaff", ctx, id)
	ret0, _ := ret[0].([]model.ListAvailableStaffRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableStaff indicates an expected call of ListAvailableStaff.
func (mr *MockIRepositoryMockRecorder) ListAvailableStaff(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableStaff", reflect.TypeOf((*MockIRepository)(nil).ListAvailableStaff), ctx, id)
}

// ListAvailableTag mocks base method.
func (m *MockIRepository) ListAvailableTag(ctx context.Context) ([]model.ListAvailableTagRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableTag", ctx)
	ret0, _ := ret[0].([]model.ListAvailableTagRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableTag indicates an expected call of ListAvailableTag.
func (mr *MockIRepositoryMockRecorder) ListAvailableTag(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableTag", reflect.TypeOf((*MockIRepository)(nil).ListAvailableTag), ctx)
}

// ListFAQ mocks base method.
func (m *MockIRepository) ListFAQ(ctx context.Context, arg model.ListFAQParams) ([]model.ListFAQRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFAQ", ctx, arg)
	ret0, _ := ret[0].([]model.ListFAQRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFAQ indicates an expected call of ListFAQ.
func (mr *MockIRepositoryMockRecorder) ListFAQ(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFAQ", reflect.TypeOf((*MockIRepository)(nil).ListFAQ), ctx, arg)
}

// ListFastReply mocks base method.
func (m *MockIRepository) ListFastReply(ctx context.Context, arg model.ListFastReplyParams) ([]model.ListFastReplyRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFastReply", ctx, arg)
	ret0, _ := ret[0].([]model.ListFastReplyRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFastReply indicates an expected call of ListFastReply.
func (mr *MockIRepositoryMockRecorder) ListFastReply(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFastReply", reflect.TypeOf((*MockIRepository)(nil).ListFastReply), ctx, arg)
}

// ListFastReplyCategory mocks base method.
func (m *MockIRepository) ListFastReplyCategory(ctx context.Context) ([]model.Constant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFastReplyCategory", ctx)
	ret0, _ := ret[0].([]model.Constant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFastReplyCategory indicates an expected call of ListFastReplyCategory.
func (mr *MockIRepositoryMockRecorder) ListFastReplyCategory(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFastReplyCategory", reflect.TypeOf((*MockIRepository)(nil).ListFastReplyCategory), ctx)
}

// ListMember mocks base method.
func (m *MockIRepository) ListMember(ctx context.Context, arg model.ListMemberParams) ([]model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMember", ctx, arg)
	ret0, _ := ret[0].([]model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMember indicates an expected call of ListMember.
func (mr *MockIRepositoryMockRecorder) ListMember(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMember", reflect.TypeOf((*MockIRepository)(nil).ListMember), ctx, arg)
}

// ListMemberRoomMessage mocks base method.
func (m *MockIRepository) ListMemberRoomMessage(ctx context.Context, arg model.ListMemberRoomMessageParams) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMemberRoomMessage", ctx, arg)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMemberRoomMessage indicates an expected call of ListMemberRoomMessage.
func (mr *MockIRepositoryMockRecorder) ListMemberRoomMessage(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMemberRoomMessage", reflect.TypeOf((*MockIRepository)(nil).ListMemberRoomMessage), ctx, arg)
}

// ListMessage mocks base method.
func (m *MockIRepository) ListMessage(ctx context.Context, arg model.ListMessageParams) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessage", ctx, arg)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessage indicates an expected call of ListMessage.
func (mr *MockIRepositoryMockRecorder) ListMessage(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessage", reflect.TypeOf((*MockIRepository)(nil).ListMessage), ctx, arg)
}

// ListNotice mocks base method.
func (m *MockIRepository) ListNotice(ctx context.Context, arg model.ListNoticeParams) ([]model.ListNoticeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotice", ctx, arg)
	ret0, _ := ret[0].([]model.ListNoticeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotice indicates an expected call of ListNotice.
func (mr *MockIRepositoryMockRecorder) ListNotice(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotice", reflect.TypeOf((*MockIRepository)(nil).ListNotice), ctx, arg)
}

// ListRemind mocks base method.
func (m *MockIRepository) ListRemind(ctx context.Context, arg model.ListRemindParams) ([]model.Remind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemind", ctx, arg)
	ret0, _ := ret[0].([]model.Remind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemind indicates an expected call of ListRemind.
func (mr *MockIRepositoryMockRecorder) ListRemind(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemind", reflect.TypeOf((*MockIRepository)(nil).ListRemind), ctx, arg)
}

// ListReportDailyGuest mocks base method.
func (m *MockIRepository) ListReportDailyGuest(ctx context.Context, arg model.ListReportDailyGuestParams) ([]model.ReportDailyGuest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReportDailyGuest", ctx, arg)
	ret0, _ := ret[0].([]model.ReportDailyGuest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReportDailyGuest indicates an expected call of ListReportDailyGuest.
func (mr *MockIRepositoryMockRecorder) ListReportDailyGuest(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportDailyGuest", reflect.TypeOf((*MockIRepository)(nil).ListReportDailyGuest), ctx, arg)
}

// ListReportDailyTag mocks base method.
func (m *MockIRepository) ListReportDailyTag(ctx context.Context, arg model.ListReportDailyTagParams) ([]model.ReportDailyTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReportDailyTag", ctx, arg)
	ret0, _ := ret[0].([]model.ReportDailyTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReportDailyTag indicates an expected call of ListReportDailyTag.
func (mr *MockIRepositoryMockRecorder) ListReportDailyTag(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReportDailyTag", reflect.TypeOf((*MockIRepository)(nil).ListReportDailyTag), ctx, arg)
}

// ListRole mocks base method.
func (m *MockIRepository) ListRole(ctx context.Context, arg model.ListRoleParams) ([]model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRole", ctx, arg)
	ret0, _ := ret[0].([]model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRole indicates an expected call of ListRole.
func (mr *MockIRepositoryMockRecorder) ListRole(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRole", reflect.TypeOf((*MockIRepository)(nil).ListRole), ctx, arg)
}

// ListRoom mocks base method.
func (m *MockIRepository) ListRoom(ctx context.Context, arg model.ListRoomParams) ([]model.ListRoomRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoom", ctx, arg)
	ret0, _ := ret[0].([]model.ListRoomRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoom indicates an expected call of ListRoom.
func (mr *MockIRepositoryMockRecorder) ListRoom(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoom", reflect.TypeOf((*MockIRepository)(nil).ListRoom), ctx, arg)
}

// ListStaff mocks base method.
func (m *MockIRepository) ListStaff(ctx context.Context, arg model.ListStaffParams) ([]model.ListStaffRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStaff", ctx, arg)
	ret0, _ := ret[0].([]model.ListStaffRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStaff indicates an expected call of ListStaff.
func (mr *MockIRepositoryMockRecorder) ListStaff(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStaff", reflect.TypeOf((*MockIRepository)(nil).ListStaff), ctx, arg)
}

// ListStaffRoom mocks base method.
func (m *MockIRepository) ListStaffRoom(ctx context.Context, arg model.ListStaffRoomParams) ([]model.ListStaffRoomRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStaffRoom", ctx, arg)
	ret0, _ := ret[0].([]model.ListStaffRoomRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStaffRoom indicates an expected call of ListStaffRoom.
func (mr *MockIRepositoryMockRecorder) ListStaffRoom(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStaffRoom", reflect.TypeOf((*MockIRepository)(nil).ListStaffRoom), ctx, arg)
}

// ListStaffRoomMessage mocks base method.
func (m *MockIRepository) ListStaffRoomMessage(ctx context.Context, arg model.ListStaffRoomMessageParams) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStaffRoomMessage", ctx, arg)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStaffRoomMessage indicates an expected call of ListStaffRoomMessage.
func (mr *MockIRepositoryMockRecorder) ListStaffRoomMessage(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStaffRoomMessage", reflect.TypeOf((*MockIRepository)(nil).ListStaffRoomMessage), ctx, arg)
}

// ListTag mocks base method.
func (m *MockIRepository) ListTag(ctx context.Context, arg model.ListTagParams) ([]model.ListTagRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTag", ctx, arg)
	ret0, _ := ret[0].([]model.ListTagRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTag indicates an expected call of ListTag.
func (mr *MockIRepositoryMockRecorder) ListTag(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTag", reflect.TypeOf((*MockIRepository)(nil).ListTag), ctx, arg)
}

// RoleSeeder mocks base method.
func (m *MockIRepository) RoleSeeder(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleSeeder", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RoleSeeder indicates an expected call of RoleSeeder.
func (mr *MockIRepositoryMockRecorder) RoleSeeder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleSeeder", reflect.TypeOf((*MockIRepository)(nil).RoleSeeder), ctx)
}

// StaffLogin mocks base method.
func (m *MockIRepository) StaffLogin(ctx context.Context, arg model.StaffLoginParams) (model.StaffLoginRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaffLogin", ctx, arg)
	ret0, _ := ret[0].(model.StaffLoginRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StaffLogin indicates an expected call of StaffLogin.
func (mr *MockIRepositoryMockRecorder) StaffLogin(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaffLogin", reflect.TypeOf((*MockIRepository)(nil).StaffLogin), ctx, arg)
}

// StaffSeeder mocks base method.
func (m *MockIRepository) StaffSeeder(ctx context.Context, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaffSeeder", ctx, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// StaffSeeder indicates an expected call of StaffSeeder.
func (mr *MockIRepositoryMockRecorder) StaffSeeder(ctx, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaffSeeder", reflect.TypeOf((*MockIRepository)(nil).StaffSeeder), ctx, password)
}

// TagSeeder mocks base method.
func (m *MockIRepository) TagSeeder(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagSeeder", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagSeeder indicates an expected call of TagSeeder.
func (mr *MockIRepositoryMockRecorder) TagSeeder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagSeeder", reflect.TypeOf((*MockIRepository)(nil).TagSeeder), ctx)
}

// Transaction mocks base method.
func (m *MockIRepository) Transaction(ctx context.Context, f iface.Callback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockIRepositoryMockRecorder) Transaction(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockIRepository)(nil).Transaction), ctx, f)
}

// UpdateCsConfig mocks base method.
func (m *MockIRepository) UpdateCsConfig(ctx context.Context, arg model.UpdateCsConfigParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCsConfig", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCsConfig indicates an expected call of UpdateCsConfig.
func (mr *MockIRepositoryMockRecorder) UpdateCsConfig(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCsConfig", reflect.TypeOf((*MockIRepository)(nil).UpdateCsConfig), ctx, arg)
}

// UpdateFAQ mocks base method.
func (m *MockIRepository) UpdateFAQ(ctx context.Context, arg model.UpdateFAQParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFAQ", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFAQ indicates an expected call of UpdateFAQ.
func (mr *MockIRepositoryMockRecorder) UpdateFAQ(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFAQ", reflect.TypeOf((*MockIRepository)(nil).UpdateFAQ), ctx, arg)
}

// UpdateFastReply mocks base method.
func (m *MockIRepository) UpdateFastReply(ctx context.Context, arg model.UpdateFastReplyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFastReply", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFastReply indicates an expected call of UpdateFastReply.
func (mr *MockIRepositoryMockRecorder) UpdateFastReply(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFastReply", reflect.TypeOf((*MockIRepository)(nil).UpdateFastReply), ctx, arg)
}

// UpdateNotice mocks base method.
func (m *MockIRepository) UpdateNotice(ctx context.Context, arg model.UpdateNoticeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotice", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotice indicates an expected call of UpdateNotice.
func (mr *MockIRepositoryMockRecorder) UpdateNotice(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotice", reflect.TypeOf((*MockIRepository)(nil).UpdateNotice), ctx, arg)
}

// UpdateOnlineStatus mocks base method.
func (m *MockIRepository) UpdateOnlineStatus(ctx context.Context, arg model.UpdateOnlineStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOnlineStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOnlineStatus indicates an expected call of UpdateOnlineStatus.
func (mr *MockIRepositoryMockRecorder) UpdateOnlineStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOnlineStatus", reflect.TypeOf((*MockIRepository)(nil).UpdateOnlineStatus), ctx, arg)
}

// UpdateRemind mocks base method.
func (m *MockIRepository) UpdateRemind(ctx context.Context, arg model.UpdateRemindParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemind", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRemind indicates an expected call of UpdateRemind.
func (mr *MockIRepositoryMockRecorder) UpdateRemind(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemind", reflect.TypeOf((*MockIRepository)(nil).UpdateRemind), ctx, arg)
}

// UpdateRole mocks base method.
func (m *MockIRepository) UpdateRole(ctx context.Context, arg model.UpdateRoleParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockIRepositoryMockRecorder) UpdateRole(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockIRepository)(nil).UpdateRole), ctx, arg)
}

// UpdateRoomScore mocks base method.
func (m *MockIRepository) UpdateRoomScore(ctx context.Context, arg model.UpdateRoomScoreParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomScore", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoomScore indicates an expected call of UpdateRoomScore.
func (mr *MockIRepositoryMockRecorder) UpdateRoomScore(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomScore", reflect.TypeOf((*MockIRepository)(nil).UpdateRoomScore), ctx, arg)
}

// UpdateRoomStaff mocks base method.
func (m *MockIRepository) UpdateRoomStaff(ctx context.Context, arg model.UpdateRoomStaffParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomStaff", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoomStaff indicates an expected call of UpdateRoomStaff.
func (mr *MockIRepositoryMockRecorder) UpdateRoomStaff(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomStaff", reflect.TypeOf((*MockIRepository)(nil).UpdateRoomStaff), ctx, arg)
}

// UpdateStaff mocks base method.
func (m *MockIRepository) UpdateStaff(ctx context.Context, arg model.UpdateStaffParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStaff", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStaff indicates an expected call of UpdateStaff.
func (mr *MockIRepositoryMockRecorder) UpdateStaff(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStaff", reflect.TypeOf((*MockIRepository)(nil).UpdateStaff), ctx, arg)
}

// UpdateStaffAvatar mocks base method.
func (m *MockIRepository) UpdateStaffAvatar(ctx context.Context, arg model.UpdateStaffAvatarParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStaffAvatar", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStaffAvatar indicates an expected call of UpdateStaffAvatar.
func (mr *MockIRepositoryMockRecorder) UpdateStaffAvatar(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStaffAvatar", reflect.TypeOf((*MockIRepository)(nil).UpdateStaffAvatar), ctx, arg)
}

// UpdateStaffLogin mocks base method.
func (m *MockIRepository) UpdateStaffLogin(ctx context.Context, arg model.UpdateStaffLoginParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStaffLogin", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStaffLogin indicates an expected call of UpdateStaffLogin.
func (mr *MockIRepositoryMockRecorder) UpdateStaffLogin(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStaffLogin", reflect.TypeOf((*MockIRepository)(nil).UpdateStaffLogin), ctx, arg)
}

// UpdateStaffServingStatus mocks base method.
func (m *MockIRepository) UpdateStaffServingStatus(ctx context.Context, arg model.UpdateStaffServingStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStaffServingStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStaffServingStatus indicates an expected call of UpdateStaffServingStatus.
func (mr *MockIRepositoryMockRecorder) UpdateStaffServingStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStaffServingStatus", reflect.TypeOf((*MockIRepository)(nil).UpdateStaffServingStatus), ctx, arg)
}

// UpdateStaffWithPassword mocks base method.
func (m *MockIRepository) UpdateStaffWithPassword(ctx context.Context, arg model.UpdateStaffWithPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStaffWithPassword", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStaffWithPassword indicates an expected call of UpdateStaffWithPassword.
func (mr *MockIRepositoryMockRecorder) UpdateStaffWithPassword(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStaffWithPassword", reflect.TypeOf((*MockIRepository)(nil).UpdateStaffWithPassword), ctx, arg)
}

// UpdateTag mocks base method.
func (m *MockIRepository) UpdateTag(ctx context.Context, arg model.UpdateTagParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockIRepositoryMockRecorder) UpdateTag(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockIRepository)(nil).UpdateTag), ctx, arg)
}

// WithTx mocks base method.
func (m *MockIRepository) WithTx(tx *sql.Tx) model.Querier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(model.Querier)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockIRepositoryMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockIRepository)(nil).WithTx), tx)
}
