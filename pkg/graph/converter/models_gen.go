// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package converter

import (
	"fmt"
	"io"
	"strconv"
)

type CloseRoomInput struct {
	ID    int64 `json:"id"`
	TagID int64 `json:"tagID"`
}

type CreateFastMessageCategoryInput struct {
	Name string `json:"name"`
}

type CreateFastMessageInput struct {
	CategoryID int64  `json:"categoryID"`
	Title      string `json:"title"`
	Content    string `json:"content"`
	Status     Status `json:"status"`
}

type CreateNoticeInput struct {
	Title   string `json:"title"`
	Content string `json:"content"`
	StartAt string `json:"startAt"`
	EndAt   string `json:"endAt"`
	Status  Status `json:"status"`
}

type CreateRemindInput struct {
	Title   string `json:"title"`
	Content string `json:"content"`
	Status  Status `json:"status"`
}

type CreateStaffInput struct {
	RoleID   int64  `json:"roleID"`
	Name     string `json:"name"`
	Username string `json:"username"`
	Password string `json:"password"`
	Status   Status `json:"status"`
}

type CsConfig struct {
	MaxMember           int64  `json:"maxMember"`
	MemberPendingExpire int64  `json:"memberPendingExpire"`
	GreetingText        string `json:"greetingText"`
}

type DailyGuestReportItem struct {
	Date       string `json:"date"`
	GuestCount int64  `json:"guestCount"`
}

type DailyTagReportColumn struct {
	Label string `json:"label"`
	Key   string `json:"key"`
}

type DailyTagReportItem struct {
	Date     string `json:"date"`
	JSONData string `json:"jsonData"`
}

type FastMessage struct {
	ID         int64  `json:"id"`
	Category   string `json:"category"`
	CategoryID int64  `json:"categoryID"`
	Title      string `json:"title"`
	Content    string `json:"content"`
	Status     Status `json:"status"`
}

type FastMessageCategory struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

type FastMessageGroupItem struct {
	Category *FastMessageCategory `json:"category"`
	Items    []*FastMessage       `json:"items"`
}

type GetCsConfigResp struct {
	Config *CsConfig `json:"config"`
}

type GetFastMessageResp struct {
	FastMessage *FastMessage `json:"fastMessage"`
}

type GetNoticeResp struct {
	Notice *Notice `json:"notice"`
}

type GetRemindResp struct {
	Remind *Remind `json:"remind"`
}

type GetStaffResp struct {
	Staff *Staff `json:"staff"`
}

type ListAvailableStaffResp struct {
	Staffs []*Staff `json:"staffs"`
}

type ListDailyGuestReportInput struct {
	StartDate string `json:"startDate"`
	EndDate   string `json:"endDate"`
}

type ListDailyGuestReportResp struct {
	Items []*DailyGuestReportItem `json:"items"`
}

type ListDailyTagReportInput struct {
	StartDate string `json:"startDate"`
	EndDate   string `json:"endDate"`
}

type ListDailyTagReportResp struct {
	Columns []*DailyTagReportColumn `json:"columns"`
	Items   []*DailyTagReportItem   `json:"items"`
}

type ListFastMessageCategoryResp struct {
	Categories []*FastMessageCategory `json:"categories"`
}

type ListFastMessageGroupResp struct {
	Group []*FastMessageGroupItem `json:"group"`
}

type ListFastMessageInput struct {
	Title   string `json:"title"`
	Content string `json:"content"`
	Status  Status `json:"status"`
}

type ListFastMessageResp struct {
	Pagination   *Pagination    `json:"pagination"`
	FastMessages []*FastMessage `json:"fastMessages"`
}

type ListMessageInput struct {
	RoomID  int64  `json:"roomID"`
	StaffID int64  `json:"staffID"`
	Content string `json:"content"`
}

type ListMessageResp struct {
	Pagination *Pagination `json:"pagination"`
	Messages   []*Message  `json:"messages"`
}

type ListNoticeInput struct {
	Content string `json:"content"`
	Status  Status `json:"status"`
}

type ListNoticeResp struct {
	Pagination *Pagination `json:"pagination"`
	Notices    []*Notice   `json:"notices"`
}

type ListRemindInput struct {
	Content string `json:"content"`
	Status  Status `json:"status"`
}

type ListRemindResp struct {
	Pagination *Pagination `json:"pagination"`
	Reminds    []*Remind   `json:"reminds"`
}

type ListRoomInput struct {
	RoomID  int64      `json:"roomID"`
	StaffID int64      `json:"staffID"`
	Status  RoomStatus `json:"status"`
}

type ListRoomMessageInput struct {
	RoomID     int64      `json:"roomID"`
	ClientType ClientType `json:"clientType"`
}

type ListRoomMessageResp struct {
	Messages []*Message `json:"messages"`
}

type ListRoomResp struct {
	Pagination *Pagination `json:"pagination"`
	Rooms      []*Room     `json:"rooms"`
}

type ListStaffInput struct {
	Name          string             `json:"name"`
	Status        Status             `json:"status"`
	ServingStatus StaffServingStatus `json:"servingStatus"`
}

type ListStaffResp struct {
	Pagination *Pagination `json:"pagination"`
	Staffs     []*Staff    `json:"staffs"`
}

type ListStaffRoomInput struct {
	Status RoomStatus `json:"status"`
}

type ListStaffRoomResp struct {
	Pagination *Pagination `json:"pagination"`
	Rooms      []*Room     `json:"rooms"`
}

type Message struct {
	ID          string             `json:"id"`
	MessageType MessageType        `json:"messageType"`
	RoomID      int64              `json:"roomID"`
	SenderName  string             `json:"senderName"`
	ContentType MessageContentType `json:"contentType"`
	Content     string             `json:"content"`
	ExtraInfo   *MessageExtraInfo  `json:"extraInfo"`
	Timestamp   int64              `json:"timestamp"`
}

type MessageExtraInfo struct {
	ClientName *string `json:"clientName"`
}

type Notice struct {
	ID      int64  `json:"id"`
	Title   string `json:"title"`
	Content string `json:"content"`
	StartAt string `json:"startAt"`
	EndAt   string `json:"endAt"`
	Status  Status `json:"status"`
}

type Pagination struct {
	Page     int64 `json:"page"`
	PageSize int64 `json:"pageSize"`
	Total    int64 `json:"total"`
}

type PaginationInput struct {
	Page     int64 `json:"page"`
	PageSize int64 `json:"pageSize"`
}

type Remind struct {
	ID      int64  `json:"id"`
	Title   string `json:"title"`
	Content string `json:"content"`
	Status  Status `json:"status"`
}

type Room struct {
	ID         int64      `json:"id"`
	MemberName string     `json:"memberName"`
	StaffName  string     `json:"staffName"`
	TagName    string     `json:"tagName"`
	StartTime  string     `json:"startTime"`
	EndTime    string     `json:"endTime"`
	Status     RoomStatus `json:"status"`
}

type Staff struct {
	ID            int64              `json:"id"`
	RoleID        int64              `json:"roleID"`
	Role          string             `json:"role"`
	Permissions   []string           `json:"permissions"`
	Name          string             `json:"name"`
	Username      string             `json:"username"`
	Status        Status             `json:"status"`
	ServingStatus StaffServingStatus `json:"servingStatus"`
	Avatar        string             `json:"avatar"`
}

type TransferRoomInput struct {
	ID      int64 `json:"id"`
	StaffID int64 `json:"staffID"`
}

type UpdateCsConfigInput struct {
	// 每位客服最高服務客戶數
	MaxMember int64 `json:"maxMember"`
	// 用戶閒置自動過期時間，單位：分鐘
	MemberPendingExpire int64 `json:"memberPendingExpire"`
	// 問候語
	GreetingText string `json:"greetingText"`
}

type UpdateFastMessageInput struct {
	ID         int64  `json:"id"`
	CategoryID int64  `json:"categoryID"`
	Title      string `json:"title"`
	Content    string `json:"content"`
	Status     Status `json:"status"`
}

type UpdateNoticeInput struct {
	ID      int64  `json:"id"`
	Title   string `json:"title"`
	Content string `json:"content"`
	StartAt string `json:"startAt"`
	EndAt   string `json:"endAt"`
	Status  Status `json:"status"`
}

type UpdateRemindInput struct {
	ID      int64  `json:"id"`
	Title   string `json:"title"`
	Content string `json:"content"`
	Status  Status `json:"status"`
}

type UpdateStaffInput struct {
	ID       int64   `json:"id"`
	RoleID   int64   `json:"roleID"`
	Name     string  `json:"name"`
	Password *string `json:"password"`
	Status   Status  `json:"status"`
}

type ClientType string

const (
	ClientTypeStaff  ClientType = "Staff"
	ClientTypeMember ClientType = "Member"
)

var AllClientType = []ClientType{
	ClientTypeStaff,
	ClientTypeMember,
}

func (e ClientType) IsValid() bool {
	switch e {
	case ClientTypeStaff, ClientTypeMember:
		return true
	}
	return false
}

func (e ClientType) String() string {
	return string(e)
}

func (e *ClientType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ClientType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ClientType", str)
	}
	return nil
}

func (e ClientType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MessageContentType string

const (
	MessageContentTypeTyping       MessageContentType = "Typing"
	MessageContentTypeText         MessageContentType = "Text"
	MessageContentTypeImage        MessageContentType = "Image"
	MessageContentTypeScore        MessageContentType = "Score"
	MessageContentTypeJoin         MessageContentType = "Join"
	MessageContentTypeLeave        MessageContentType = "Leave"
	MessageContentTypeNoStaff      MessageContentType = "NoStaff"
	MessageContentTypeRoomClosed   MessageContentType = "RoomClosed"
	MessageContentTypeRoomAccepted MessageContentType = "RoomAccepted"
)

var AllMessageContentType = []MessageContentType{
	MessageContentTypeTyping,
	MessageContentTypeText,
	MessageContentTypeImage,
	MessageContentTypeScore,
	MessageContentTypeJoin,
	MessageContentTypeLeave,
	MessageContentTypeNoStaff,
	MessageContentTypeRoomClosed,
	MessageContentTypeRoomAccepted,
}

func (e MessageContentType) IsValid() bool {
	switch e {
	case MessageContentTypeTyping, MessageContentTypeText, MessageContentTypeImage, MessageContentTypeScore, MessageContentTypeJoin, MessageContentTypeLeave, MessageContentTypeNoStaff, MessageContentTypeRoomClosed, MessageContentTypeRoomAccepted:
		return true
	}
	return false
}

func (e MessageContentType) String() string {
	return string(e)
}

func (e *MessageContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageContentType", str)
	}
	return nil
}

func (e MessageContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MessageType string

const (
	MessageTypeSystem MessageType = "System"
	MessageTypeMember MessageType = "Member"
	MessageTypeStaff  MessageType = "Staff"
)

var AllMessageType = []MessageType{
	MessageTypeSystem,
	MessageTypeMember,
	MessageTypeStaff,
}

func (e MessageType) IsValid() bool {
	switch e {
	case MessageTypeSystem, MessageTypeMember, MessageTypeStaff:
		return true
	}
	return false
}

func (e MessageType) String() string {
	return string(e)
}

func (e *MessageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageType", str)
	}
	return nil
}

func (e MessageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RoomStatus string

const (
	// 全部
	RoomStatusAll RoomStatus = "All"
	// 等待中
	RoomStatusPending RoomStatus = "Pending"
	// 服務中
	RoomStatusServing RoomStatus = "Serving"
	// 已關閉
	RoomStatusClosed RoomStatus = "Closed"
)

var AllRoomStatus = []RoomStatus{
	RoomStatusAll,
	RoomStatusPending,
	RoomStatusServing,
	RoomStatusClosed,
}

func (e RoomStatus) IsValid() bool {
	switch e {
	case RoomStatusAll, RoomStatusPending, RoomStatusServing, RoomStatusClosed:
		return true
	}
	return false
}

func (e RoomStatus) String() string {
	return string(e)
}

func (e *RoomStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoomStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoomStatus", str)
	}
	return nil
}

func (e RoomStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StaffServingStatus string

const (
	StaffServingStatusAll     StaffServingStatus = "All"
	StaffServingStatusClosed  StaffServingStatus = "Closed"
	StaffServingStatusServing StaffServingStatus = "Serving"
	StaffServingStatusPending StaffServingStatus = "Pending"
)

var AllStaffServingStatus = []StaffServingStatus{
	StaffServingStatusAll,
	StaffServingStatusClosed,
	StaffServingStatusServing,
	StaffServingStatusPending,
}

func (e StaffServingStatus) IsValid() bool {
	switch e {
	case StaffServingStatusAll, StaffServingStatusClosed, StaffServingStatusServing, StaffServingStatusPending:
		return true
	}
	return false
}

func (e StaffServingStatus) String() string {
	return string(e)
}

func (e *StaffServingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StaffServingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StaffServingStatus", str)
	}
	return nil
}

func (e StaffServingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusAll      Status = "All"
	StatusEnabled  Status = "Enabled"
	StatusDisabled Status = "Disabled"
)

var AllStatus = []Status{
	StatusAll,
	StatusEnabled,
	StatusDisabled,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusAll, StatusEnabled, StatusDisabled:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
