// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package converter

import (
	"fmt"
	"io"
	"strconv"
)

type CloseRoomInput struct {
	ID    int64 `json:"id"`
	TagID int64 `json:"tagID"`
}

type ListRoomInput struct {
	RoomID  int64      `json:"roomID"`
	StaffID int64      `json:"staffID"`
	Status  RoomStatus `json:"status"`
}

type ListRoomResp struct {
	Pagination *Pagination `json:"pagination"`
	Rooms      []*Room     `json:"rooms"`
}

type ListStaffRoomInput struct {
	Status RoomStatus `json:"status"`
}

type ListStaffRoomResp struct {
	Pagination *Pagination `json:"pagination"`
	Rooms      []*Room     `json:"rooms"`
}

type Pagination struct {
	Page     int64 `json:"page"`
	PageSize int64 `json:"pageSize"`
	Total    int64 `json:"total"`
}

type PaginationInput struct {
	Page     int64 `json:"page"`
	PageSize int64 `json:"pageSize"`
}

type Room struct {
	ID         int64      `json:"id"`
	MemberName string     `json:"memberName"`
	StaffName  string     `json:"staffName"`
	TagName    string     `json:"tagName"`
	StartTime  string     `json:"startTime"`
	EndTime    string     `json:"endTime"`
	Status     RoomStatus `json:"status"`
}

type TransferRoomInput struct {
	ID      int64 `json:"id"`
	StaffID int64 `json:"staffID"`
}

type RoomStatus string

const (
	// 全部
	RoomStatusAll RoomStatus = "All"
	// 等待中
	RoomStatusPending RoomStatus = "Pending"
	// 服務中
	RoomStatusServing RoomStatus = "Serving"
	// 已關閉
	RoomStatusClosed RoomStatus = "Closed"
)

var AllRoomStatus = []RoomStatus{
	RoomStatusAll,
	RoomStatusPending,
	RoomStatusServing,
	RoomStatusClosed,
}

func (e RoomStatus) IsValid() bool {
	switch e {
	case RoomStatusAll, RoomStatusPending, RoomStatusServing, RoomStatusClosed:
		return true
	}
	return false
}

func (e RoomStatus) String() string {
	return string(e)
}

func (e *RoomStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoomStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoomStatus", str)
	}
	return nil
}

func (e RoomStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusAll      Status = "All"
	StatusEnabled  Status = "Enabled"
	StatusDisabled Status = "Disabled"
)

var AllStatus = []Status{
	StatusAll,
	StatusEnabled,
	StatusDisabled,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusAll, StatusEnabled, StatusDisabled:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
