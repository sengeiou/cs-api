// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package model

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.acceptRoomStmt, err = db.PrepareContext(ctx, acceptRoom); err != nil {
		return nil, fmt.Errorf("error preparing query AcceptRoom: %w", err)
	}
	if q.closeRoomStmt, err = db.PrepareContext(ctx, closeRoom); err != nil {
		return nil, fmt.Errorf("error preparing query CloseRoom: %w", err)
	}
	if q.constantSeederStmt, err = db.PrepareContext(ctx, constantSeeder); err != nil {
		return nil, fmt.Errorf("error preparing query ConstantSeeder: %w", err)
	}
	if q.countClosedRoomByTagStmt, err = db.PrepareContext(ctx, countClosedRoomByTag); err != nil {
		return nil, fmt.Errorf("error preparing query CountClosedRoomByTag: %w", err)
	}
	if q.countDailyRoomByMemberStmt, err = db.PrepareContext(ctx, countDailyRoomByMember); err != nil {
		return nil, fmt.Errorf("error preparing query CountDailyRoomByMember: %w", err)
	}
	if q.countListFastMessageStmt, err = db.PrepareContext(ctx, countListFastMessage); err != nil {
		return nil, fmt.Errorf("error preparing query CountListFastMessage: %w", err)
	}
	if q.countListNoticeStmt, err = db.PrepareContext(ctx, countListNotice); err != nil {
		return nil, fmt.Errorf("error preparing query CountListNotice: %w", err)
	}
	if q.countListRemindStmt, err = db.PrepareContext(ctx, countListRemind); err != nil {
		return nil, fmt.Errorf("error preparing query CountListRemind: %w", err)
	}
	if q.countListRoleStmt, err = db.PrepareContext(ctx, countListRole); err != nil {
		return nil, fmt.Errorf("error preparing query CountListRole: %w", err)
	}
	if q.countListRoomStmt, err = db.PrepareContext(ctx, countListRoom); err != nil {
		return nil, fmt.Errorf("error preparing query CountListRoom: %w", err)
	}
	if q.countListStaffStmt, err = db.PrepareContext(ctx, countListStaff); err != nil {
		return nil, fmt.Errorf("error preparing query CountListStaff: %w", err)
	}
	if q.countListStaffRoomStmt, err = db.PrepareContext(ctx, countListStaffRoom); err != nil {
		return nil, fmt.Errorf("error preparing query CountListStaffRoom: %w", err)
	}
	if q.countListTagStmt, err = db.PrepareContext(ctx, countListTag); err != nil {
		return nil, fmt.Errorf("error preparing query CountListTag: %w", err)
	}
	if q.createFastMessageStmt, err = db.PrepareContext(ctx, createFastMessage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFastMessage: %w", err)
	}
	if q.createFastMessageCategoryStmt, err = db.PrepareContext(ctx, createFastMessageCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFastMessageCategory: %w", err)
	}
	if q.createMemberStmt, err = db.PrepareContext(ctx, createMember); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMember: %w", err)
	}
	if q.createNoticeStmt, err = db.PrepareContext(ctx, createNotice); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNotice: %w", err)
	}
	if q.createRemindStmt, err = db.PrepareContext(ctx, createRemind); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRemind: %w", err)
	}
	if q.createReportDailyGuestStmt, err = db.PrepareContext(ctx, createReportDailyGuest); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReportDailyGuest: %w", err)
	}
	if q.createReportDailyTagStmt, err = db.PrepareContext(ctx, createReportDailyTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReportDailyTag: %w", err)
	}
	if q.createRoleStmt, err = db.PrepareContext(ctx, createRole); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRole: %w", err)
	}
	if q.createRoomStmt, err = db.PrepareContext(ctx, createRoom); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRoom: %w", err)
	}
	if q.createStaffStmt, err = db.PrepareContext(ctx, createStaff); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStaff: %w", err)
	}
	if q.createTagStmt, err = db.PrepareContext(ctx, createTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTag: %w", err)
	}
	if q.deleteFastMessageStmt, err = db.PrepareContext(ctx, deleteFastMessage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFastMessage: %w", err)
	}
	if q.deleteNoticeStmt, err = db.PrepareContext(ctx, deleteNotice); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNotice: %w", err)
	}
	if q.deleteRemindStmt, err = db.PrepareContext(ctx, deleteRemind); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRemind: %w", err)
	}
	if q.deleteReportDailyGuestStmt, err = db.PrepareContext(ctx, deleteReportDailyGuest); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteReportDailyGuest: %w", err)
	}
	if q.deleteReportDailyTagStmt, err = db.PrepareContext(ctx, deleteReportDailyTag); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteReportDailyTag: %w", err)
	}
	if q.deleteRoleStmt, err = db.PrepareContext(ctx, deleteRole); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRole: %w", err)
	}
	if q.deleteStaffStmt, err = db.PrepareContext(ctx, deleteStaff); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteStaff: %w", err)
	}
	if q.deleteTagStmt, err = db.PrepareContext(ctx, deleteTag); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTag: %w", err)
	}
	if q.getAllAvailableFastMessageStmt, err = db.PrepareContext(ctx, getAllAvailableFastMessage); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllAvailableFastMessage: %w", err)
	}
	if q.getAllTagStmt, err = db.PrepareContext(ctx, getAllTag); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllTag: %w", err)
	}
	if q.getAvailableNoticeStmt, err = db.PrepareContext(ctx, getAvailableNotice); err != nil {
		return nil, fmt.Errorf("error preparing query GetAvailableNotice: %w", err)
	}
	if q.getCsConfigStmt, err = db.PrepareContext(ctx, getCsConfig); err != nil {
		return nil, fmt.Errorf("error preparing query GetCsConfig: %w", err)
	}
	if q.getFastMessageStmt, err = db.PrepareContext(ctx, getFastMessage); err != nil {
		return nil, fmt.Errorf("error preparing query GetFastMessage: %w", err)
	}
	if q.getGuestMemberStmt, err = db.PrepareContext(ctx, getGuestMember); err != nil {
		return nil, fmt.Errorf("error preparing query GetGuestMember: %w", err)
	}
	if q.getMemberAvailableRoomStmt, err = db.PrepareContext(ctx, getMemberAvailableRoom); err != nil {
		return nil, fmt.Errorf("error preparing query GetMemberAvailableRoom: %w", err)
	}
	if q.getNormalMemberStmt, err = db.PrepareContext(ctx, getNormalMember); err != nil {
		return nil, fmt.Errorf("error preparing query GetNormalMember: %w", err)
	}
	if q.getNoticeStmt, err = db.PrepareContext(ctx, getNotice); err != nil {
		return nil, fmt.Errorf("error preparing query GetNotice: %w", err)
	}
	if q.getRemindStmt, err = db.PrepareContext(ctx, getRemind); err != nil {
		return nil, fmt.Errorf("error preparing query GetRemind: %w", err)
	}
	if q.getRoleStmt, err = db.PrepareContext(ctx, getRole); err != nil {
		return nil, fmt.Errorf("error preparing query GetRole: %w", err)
	}
	if q.getRoomStmt, err = db.PrepareContext(ctx, getRoom); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoom: %w", err)
	}
	if q.getStaffStmt, err = db.PrepareContext(ctx, getStaff); err != nil {
		return nil, fmt.Errorf("error preparing query GetStaff: %w", err)
	}
	if q.getStaffCountByRoleIdStmt, err = db.PrepareContext(ctx, getStaffCountByRoleId); err != nil {
		return nil, fmt.Errorf("error preparing query GetStaffCountByRoleId: %w", err)
	}
	if q.getStaffRoomStmt, err = db.PrepareContext(ctx, getStaffRoom); err != nil {
		return nil, fmt.Errorf("error preparing query GetStaffRoom: %w", err)
	}
	if q.getTagStmt, err = db.PrepareContext(ctx, getTag); err != nil {
		return nil, fmt.Errorf("error preparing query GetTag: %w", err)
	}
	if q.listAvailableStaffStmt, err = db.PrepareContext(ctx, listAvailableStaff); err != nil {
		return nil, fmt.Errorf("error preparing query ListAvailableStaff: %w", err)
	}
	if q.listFastMessageStmt, err = db.PrepareContext(ctx, listFastMessage); err != nil {
		return nil, fmt.Errorf("error preparing query ListFastMessage: %w", err)
	}
	if q.listFastMessageCategoryStmt, err = db.PrepareContext(ctx, listFastMessageCategory); err != nil {
		return nil, fmt.Errorf("error preparing query ListFastMessageCategory: %w", err)
	}
	if q.listNoticeStmt, err = db.PrepareContext(ctx, listNotice); err != nil {
		return nil, fmt.Errorf("error preparing query ListNotice: %w", err)
	}
	if q.listRemindStmt, err = db.PrepareContext(ctx, listRemind); err != nil {
		return nil, fmt.Errorf("error preparing query ListRemind: %w", err)
	}
	if q.listReportDailyGuestStmt, err = db.PrepareContext(ctx, listReportDailyGuest); err != nil {
		return nil, fmt.Errorf("error preparing query ListReportDailyGuest: %w", err)
	}
	if q.listReportDailyTagStmt, err = db.PrepareContext(ctx, listReportDailyTag); err != nil {
		return nil, fmt.Errorf("error preparing query ListReportDailyTag: %w", err)
	}
	if q.listRoleStmt, err = db.PrepareContext(ctx, listRole); err != nil {
		return nil, fmt.Errorf("error preparing query ListRole: %w", err)
	}
	if q.listRoomStmt, err = db.PrepareContext(ctx, listRoom); err != nil {
		return nil, fmt.Errorf("error preparing query ListRoom: %w", err)
	}
	if q.listStaffStmt, err = db.PrepareContext(ctx, listStaff); err != nil {
		return nil, fmt.Errorf("error preparing query ListStaff: %w", err)
	}
	if q.listStaffRoomStmt, err = db.PrepareContext(ctx, listStaffRoom); err != nil {
		return nil, fmt.Errorf("error preparing query ListStaffRoom: %w", err)
	}
	if q.listTagStmt, err = db.PrepareContext(ctx, listTag); err != nil {
		return nil, fmt.Errorf("error preparing query ListTag: %w", err)
	}
	if q.roleSeederStmt, err = db.PrepareContext(ctx, roleSeeder); err != nil {
		return nil, fmt.Errorf("error preparing query RoleSeeder: %w", err)
	}
	if q.staffLoginStmt, err = db.PrepareContext(ctx, staffLogin); err != nil {
		return nil, fmt.Errorf("error preparing query StaffLogin: %w", err)
	}
	if q.staffSeederStmt, err = db.PrepareContext(ctx, staffSeeder); err != nil {
		return nil, fmt.Errorf("error preparing query StaffSeeder: %w", err)
	}
	if q.tagSeederStmt, err = db.PrepareContext(ctx, tagSeeder); err != nil {
		return nil, fmt.Errorf("error preparing query TagSeeder: %w", err)
	}
	if q.updateCsConfigStmt, err = db.PrepareContext(ctx, updateCsConfig); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCsConfig: %w", err)
	}
	if q.updateFastMessageStmt, err = db.PrepareContext(ctx, updateFastMessage); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFastMessage: %w", err)
	}
	if q.updateNoticeStmt, err = db.PrepareContext(ctx, updateNotice); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNotice: %w", err)
	}
	if q.updateRemindStmt, err = db.PrepareContext(ctx, updateRemind); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRemind: %w", err)
	}
	if q.updateRoleStmt, err = db.PrepareContext(ctx, updateRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRole: %w", err)
	}
	if q.updateRoomScoreStmt, err = db.PrepareContext(ctx, updateRoomScore); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomScore: %w", err)
	}
	if q.updateRoomStaffStmt, err = db.PrepareContext(ctx, updateRoomStaff); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomStaff: %w", err)
	}
	if q.updateStaffStmt, err = db.PrepareContext(ctx, updateStaff); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStaff: %w", err)
	}
	if q.updateStaffAvatarStmt, err = db.PrepareContext(ctx, updateStaffAvatar); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStaffAvatar: %w", err)
	}
	if q.updateStaffLoginStmt, err = db.PrepareContext(ctx, updateStaffLogin); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStaffLogin: %w", err)
	}
	if q.updateStaffServingStatusStmt, err = db.PrepareContext(ctx, updateStaffServingStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStaffServingStatus: %w", err)
	}
	if q.updateStaffWithPasswordStmt, err = db.PrepareContext(ctx, updateStaffWithPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStaffWithPassword: %w", err)
	}
	if q.updateTagStmt, err = db.PrepareContext(ctx, updateTag); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTag: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.acceptRoomStmt != nil {
		if cerr := q.acceptRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing acceptRoomStmt: %w", cerr)
		}
	}
	if q.closeRoomStmt != nil {
		if cerr := q.closeRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing closeRoomStmt: %w", cerr)
		}
	}
	if q.constantSeederStmt != nil {
		if cerr := q.constantSeederStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing constantSeederStmt: %w", cerr)
		}
	}
	if q.countClosedRoomByTagStmt != nil {
		if cerr := q.countClosedRoomByTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countClosedRoomByTagStmt: %w", cerr)
		}
	}
	if q.countDailyRoomByMemberStmt != nil {
		if cerr := q.countDailyRoomByMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countDailyRoomByMemberStmt: %w", cerr)
		}
	}
	if q.countListFastMessageStmt != nil {
		if cerr := q.countListFastMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countListFastMessageStmt: %w", cerr)
		}
	}
	if q.countListNoticeStmt != nil {
		if cerr := q.countListNoticeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countListNoticeStmt: %w", cerr)
		}
	}
	if q.countListRemindStmt != nil {
		if cerr := q.countListRemindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countListRemindStmt: %w", cerr)
		}
	}
	if q.countListRoleStmt != nil {
		if cerr := q.countListRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countListRoleStmt: %w", cerr)
		}
	}
	if q.countListRoomStmt != nil {
		if cerr := q.countListRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countListRoomStmt: %w", cerr)
		}
	}
	if q.countListStaffStmt != nil {
		if cerr := q.countListStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countListStaffStmt: %w", cerr)
		}
	}
	if q.countListStaffRoomStmt != nil {
		if cerr := q.countListStaffRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countListStaffRoomStmt: %w", cerr)
		}
	}
	if q.countListTagStmt != nil {
		if cerr := q.countListTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countListTagStmt: %w", cerr)
		}
	}
	if q.createFastMessageStmt != nil {
		if cerr := q.createFastMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFastMessageStmt: %w", cerr)
		}
	}
	if q.createFastMessageCategoryStmt != nil {
		if cerr := q.createFastMessageCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFastMessageCategoryStmt: %w", cerr)
		}
	}
	if q.createMemberStmt != nil {
		if cerr := q.createMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMemberStmt: %w", cerr)
		}
	}
	if q.createNoticeStmt != nil {
		if cerr := q.createNoticeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNoticeStmt: %w", cerr)
		}
	}
	if q.createRemindStmt != nil {
		if cerr := q.createRemindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRemindStmt: %w", cerr)
		}
	}
	if q.createReportDailyGuestStmt != nil {
		if cerr := q.createReportDailyGuestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReportDailyGuestStmt: %w", cerr)
		}
	}
	if q.createReportDailyTagStmt != nil {
		if cerr := q.createReportDailyTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReportDailyTagStmt: %w", cerr)
		}
	}
	if q.createRoleStmt != nil {
		if cerr := q.createRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoleStmt: %w", cerr)
		}
	}
	if q.createRoomStmt != nil {
		if cerr := q.createRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoomStmt: %w", cerr)
		}
	}
	if q.createStaffStmt != nil {
		if cerr := q.createStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStaffStmt: %w", cerr)
		}
	}
	if q.createTagStmt != nil {
		if cerr := q.createTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTagStmt: %w", cerr)
		}
	}
	if q.deleteFastMessageStmt != nil {
		if cerr := q.deleteFastMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFastMessageStmt: %w", cerr)
		}
	}
	if q.deleteNoticeStmt != nil {
		if cerr := q.deleteNoticeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNoticeStmt: %w", cerr)
		}
	}
	if q.deleteRemindStmt != nil {
		if cerr := q.deleteRemindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRemindStmt: %w", cerr)
		}
	}
	if q.deleteReportDailyGuestStmt != nil {
		if cerr := q.deleteReportDailyGuestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteReportDailyGuestStmt: %w", cerr)
		}
	}
	if q.deleteReportDailyTagStmt != nil {
		if cerr := q.deleteReportDailyTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteReportDailyTagStmt: %w", cerr)
		}
	}
	if q.deleteRoleStmt != nil {
		if cerr := q.deleteRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRoleStmt: %w", cerr)
		}
	}
	if q.deleteStaffStmt != nil {
		if cerr := q.deleteStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteStaffStmt: %w", cerr)
		}
	}
	if q.deleteTagStmt != nil {
		if cerr := q.deleteTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTagStmt: %w", cerr)
		}
	}
	if q.getAllAvailableFastMessageStmt != nil {
		if cerr := q.getAllAvailableFastMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllAvailableFastMessageStmt: %w", cerr)
		}
	}
	if q.getAllTagStmt != nil {
		if cerr := q.getAllTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllTagStmt: %w", cerr)
		}
	}
	if q.getAvailableNoticeStmt != nil {
		if cerr := q.getAvailableNoticeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAvailableNoticeStmt: %w", cerr)
		}
	}
	if q.getCsConfigStmt != nil {
		if cerr := q.getCsConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCsConfigStmt: %w", cerr)
		}
	}
	if q.getFastMessageStmt != nil {
		if cerr := q.getFastMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFastMessageStmt: %w", cerr)
		}
	}
	if q.getGuestMemberStmt != nil {
		if cerr := q.getGuestMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGuestMemberStmt: %w", cerr)
		}
	}
	if q.getMemberAvailableRoomStmt != nil {
		if cerr := q.getMemberAvailableRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMemberAvailableRoomStmt: %w", cerr)
		}
	}
	if q.getNormalMemberStmt != nil {
		if cerr := q.getNormalMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNormalMemberStmt: %w", cerr)
		}
	}
	if q.getNoticeStmt != nil {
		if cerr := q.getNoticeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNoticeStmt: %w", cerr)
		}
	}
	if q.getRemindStmt != nil {
		if cerr := q.getRemindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRemindStmt: %w", cerr)
		}
	}
	if q.getRoleStmt != nil {
		if cerr := q.getRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoleStmt: %w", cerr)
		}
	}
	if q.getRoomStmt != nil {
		if cerr := q.getRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoomStmt: %w", cerr)
		}
	}
	if q.getStaffStmt != nil {
		if cerr := q.getStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStaffStmt: %w", cerr)
		}
	}
	if q.getStaffCountByRoleIdStmt != nil {
		if cerr := q.getStaffCountByRoleIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStaffCountByRoleIdStmt: %w", cerr)
		}
	}
	if q.getStaffRoomStmt != nil {
		if cerr := q.getStaffRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStaffRoomStmt: %w", cerr)
		}
	}
	if q.getTagStmt != nil {
		if cerr := q.getTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagStmt: %w", cerr)
		}
	}
	if q.listAvailableStaffStmt != nil {
		if cerr := q.listAvailableStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAvailableStaffStmt: %w", cerr)
		}
	}
	if q.listFastMessageStmt != nil {
		if cerr := q.listFastMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFastMessageStmt: %w", cerr)
		}
	}
	if q.listFastMessageCategoryStmt != nil {
		if cerr := q.listFastMessageCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFastMessageCategoryStmt: %w", cerr)
		}
	}
	if q.listNoticeStmt != nil {
		if cerr := q.listNoticeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNoticeStmt: %w", cerr)
		}
	}
	if q.listRemindStmt != nil {
		if cerr := q.listRemindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRemindStmt: %w", cerr)
		}
	}
	if q.listReportDailyGuestStmt != nil {
		if cerr := q.listReportDailyGuestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listReportDailyGuestStmt: %w", cerr)
		}
	}
	if q.listReportDailyTagStmt != nil {
		if cerr := q.listReportDailyTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listReportDailyTagStmt: %w", cerr)
		}
	}
	if q.listRoleStmt != nil {
		if cerr := q.listRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRoleStmt: %w", cerr)
		}
	}
	if q.listRoomStmt != nil {
		if cerr := q.listRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRoomStmt: %w", cerr)
		}
	}
	if q.listStaffStmt != nil {
		if cerr := q.listStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listStaffStmt: %w", cerr)
		}
	}
	if q.listStaffRoomStmt != nil {
		if cerr := q.listStaffRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listStaffRoomStmt: %w", cerr)
		}
	}
	if q.listTagStmt != nil {
		if cerr := q.listTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTagStmt: %w", cerr)
		}
	}
	if q.roleSeederStmt != nil {
		if cerr := q.roleSeederStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing roleSeederStmt: %w", cerr)
		}
	}
	if q.staffLoginStmt != nil {
		if cerr := q.staffLoginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing staffLoginStmt: %w", cerr)
		}
	}
	if q.staffSeederStmt != nil {
		if cerr := q.staffSeederStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing staffSeederStmt: %w", cerr)
		}
	}
	if q.tagSeederStmt != nil {
		if cerr := q.tagSeederStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing tagSeederStmt: %w", cerr)
		}
	}
	if q.updateCsConfigStmt != nil {
		if cerr := q.updateCsConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCsConfigStmt: %w", cerr)
		}
	}
	if q.updateFastMessageStmt != nil {
		if cerr := q.updateFastMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFastMessageStmt: %w", cerr)
		}
	}
	if q.updateNoticeStmt != nil {
		if cerr := q.updateNoticeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNoticeStmt: %w", cerr)
		}
	}
	if q.updateRemindStmt != nil {
		if cerr := q.updateRemindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRemindStmt: %w", cerr)
		}
	}
	if q.updateRoleStmt != nil {
		if cerr := q.updateRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoleStmt: %w", cerr)
		}
	}
	if q.updateRoomScoreStmt != nil {
		if cerr := q.updateRoomScoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomScoreStmt: %w", cerr)
		}
	}
	if q.updateRoomStaffStmt != nil {
		if cerr := q.updateRoomStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomStaffStmt: %w", cerr)
		}
	}
	if q.updateStaffStmt != nil {
		if cerr := q.updateStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStaffStmt: %w", cerr)
		}
	}
	if q.updateStaffAvatarStmt != nil {
		if cerr := q.updateStaffAvatarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStaffAvatarStmt: %w", cerr)
		}
	}
	if q.updateStaffLoginStmt != nil {
		if cerr := q.updateStaffLoginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStaffLoginStmt: %w", cerr)
		}
	}
	if q.updateStaffServingStatusStmt != nil {
		if cerr := q.updateStaffServingStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStaffServingStatusStmt: %w", cerr)
		}
	}
	if q.updateStaffWithPasswordStmt != nil {
		if cerr := q.updateStaffWithPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStaffWithPasswordStmt: %w", cerr)
		}
	}
	if q.updateTagStmt != nil {
		if cerr := q.updateTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTagStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	acceptRoomStmt                 *sql.Stmt
	closeRoomStmt                  *sql.Stmt
	constantSeederStmt             *sql.Stmt
	countClosedRoomByTagStmt       *sql.Stmt
	countDailyRoomByMemberStmt     *sql.Stmt
	countListFastMessageStmt       *sql.Stmt
	countListNoticeStmt            *sql.Stmt
	countListRemindStmt            *sql.Stmt
	countListRoleStmt              *sql.Stmt
	countListRoomStmt              *sql.Stmt
	countListStaffStmt             *sql.Stmt
	countListStaffRoomStmt         *sql.Stmt
	countListTagStmt               *sql.Stmt
	createFastMessageStmt          *sql.Stmt
	createFastMessageCategoryStmt  *sql.Stmt
	createMemberStmt               *sql.Stmt
	createNoticeStmt               *sql.Stmt
	createRemindStmt               *sql.Stmt
	createReportDailyGuestStmt     *sql.Stmt
	createReportDailyTagStmt       *sql.Stmt
	createRoleStmt                 *sql.Stmt
	createRoomStmt                 *sql.Stmt
	createStaffStmt                *sql.Stmt
	createTagStmt                  *sql.Stmt
	deleteFastMessageStmt          *sql.Stmt
	deleteNoticeStmt               *sql.Stmt
	deleteRemindStmt               *sql.Stmt
	deleteReportDailyGuestStmt     *sql.Stmt
	deleteReportDailyTagStmt       *sql.Stmt
	deleteRoleStmt                 *sql.Stmt
	deleteStaffStmt                *sql.Stmt
	deleteTagStmt                  *sql.Stmt
	getAllAvailableFastMessageStmt *sql.Stmt
	getAllTagStmt                  *sql.Stmt
	getAvailableNoticeStmt         *sql.Stmt
	getCsConfigStmt                *sql.Stmt
	getFastMessageStmt             *sql.Stmt
	getGuestMemberStmt             *sql.Stmt
	getMemberAvailableRoomStmt     *sql.Stmt
	getNormalMemberStmt            *sql.Stmt
	getNoticeStmt                  *sql.Stmt
	getRemindStmt                  *sql.Stmt
	getRoleStmt                    *sql.Stmt
	getRoomStmt                    *sql.Stmt
	getStaffStmt                   *sql.Stmt
	getStaffCountByRoleIdStmt      *sql.Stmt
	getStaffRoomStmt               *sql.Stmt
	getTagStmt                     *sql.Stmt
	listAvailableStaffStmt         *sql.Stmt
	listFastMessageStmt            *sql.Stmt
	listFastMessageCategoryStmt    *sql.Stmt
	listNoticeStmt                 *sql.Stmt
	listRemindStmt                 *sql.Stmt
	listReportDailyGuestStmt       *sql.Stmt
	listReportDailyTagStmt         *sql.Stmt
	listRoleStmt                   *sql.Stmt
	listRoomStmt                   *sql.Stmt
	listStaffStmt                  *sql.Stmt
	listStaffRoomStmt              *sql.Stmt
	listTagStmt                    *sql.Stmt
	roleSeederStmt                 *sql.Stmt
	staffLoginStmt                 *sql.Stmt
	staffSeederStmt                *sql.Stmt
	tagSeederStmt                  *sql.Stmt
	updateCsConfigStmt             *sql.Stmt
	updateFastMessageStmt          *sql.Stmt
	updateNoticeStmt               *sql.Stmt
	updateRemindStmt               *sql.Stmt
	updateRoleStmt                 *sql.Stmt
	updateRoomScoreStmt            *sql.Stmt
	updateRoomStaffStmt            *sql.Stmt
	updateStaffStmt                *sql.Stmt
	updateStaffAvatarStmt          *sql.Stmt
	updateStaffLoginStmt           *sql.Stmt
	updateStaffServingStatusStmt   *sql.Stmt
	updateStaffWithPasswordStmt    *sql.Stmt
	updateTagStmt                  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		acceptRoomStmt:                 q.acceptRoomStmt,
		closeRoomStmt:                  q.closeRoomStmt,
		constantSeederStmt:             q.constantSeederStmt,
		countClosedRoomByTagStmt:       q.countClosedRoomByTagStmt,
		countDailyRoomByMemberStmt:     q.countDailyRoomByMemberStmt,
		countListFastMessageStmt:       q.countListFastMessageStmt,
		countListNoticeStmt:            q.countListNoticeStmt,
		countListRemindStmt:            q.countListRemindStmt,
		countListRoleStmt:              q.countListRoleStmt,
		countListRoomStmt:              q.countListRoomStmt,
		countListStaffStmt:             q.countListStaffStmt,
		countListStaffRoomStmt:         q.countListStaffRoomStmt,
		countListTagStmt:               q.countListTagStmt,
		createFastMessageStmt:          q.createFastMessageStmt,
		createFastMessageCategoryStmt:  q.createFastMessageCategoryStmt,
		createMemberStmt:               q.createMemberStmt,
		createNoticeStmt:               q.createNoticeStmt,
		createRemindStmt:               q.createRemindStmt,
		createReportDailyGuestStmt:     q.createReportDailyGuestStmt,
		createReportDailyTagStmt:       q.createReportDailyTagStmt,
		createRoleStmt:                 q.createRoleStmt,
		createRoomStmt:                 q.createRoomStmt,
		createStaffStmt:                q.createStaffStmt,
		createTagStmt:                  q.createTagStmt,
		deleteFastMessageStmt:          q.deleteFastMessageStmt,
		deleteNoticeStmt:               q.deleteNoticeStmt,
		deleteRemindStmt:               q.deleteRemindStmt,
		deleteReportDailyGuestStmt:     q.deleteReportDailyGuestStmt,
		deleteReportDailyTagStmt:       q.deleteReportDailyTagStmt,
		deleteRoleStmt:                 q.deleteRoleStmt,
		deleteStaffStmt:                q.deleteStaffStmt,
		deleteTagStmt:                  q.deleteTagStmt,
		getAllAvailableFastMessageStmt: q.getAllAvailableFastMessageStmt,
		getAllTagStmt:                  q.getAllTagStmt,
		getAvailableNoticeStmt:         q.getAvailableNoticeStmt,
		getCsConfigStmt:                q.getCsConfigStmt,
		getFastMessageStmt:             q.getFastMessageStmt,
		getGuestMemberStmt:             q.getGuestMemberStmt,
		getMemberAvailableRoomStmt:     q.getMemberAvailableRoomStmt,
		getNormalMemberStmt:            q.getNormalMemberStmt,
		getNoticeStmt:                  q.getNoticeStmt,
		getRemindStmt:                  q.getRemindStmt,
		getRoleStmt:                    q.getRoleStmt,
		getRoomStmt:                    q.getRoomStmt,
		getStaffStmt:                   q.getStaffStmt,
		getStaffCountByRoleIdStmt:      q.getStaffCountByRoleIdStmt,
		getStaffRoomStmt:               q.getStaffRoomStmt,
		getTagStmt:                     q.getTagStmt,
		listAvailableStaffStmt:         q.listAvailableStaffStmt,
		listFastMessageStmt:            q.listFastMessageStmt,
		listFastMessageCategoryStmt:    q.listFastMessageCategoryStmt,
		listNoticeStmt:                 q.listNoticeStmt,
		listRemindStmt:                 q.listRemindStmt,
		listReportDailyGuestStmt:       q.listReportDailyGuestStmt,
		listReportDailyTagStmt:         q.listReportDailyTagStmt,
		listRoleStmt:                   q.listRoleStmt,
		listRoomStmt:                   q.listRoomStmt,
		listStaffStmt:                  q.listStaffStmt,
		listStaffRoomStmt:              q.listStaffRoomStmt,
		listTagStmt:                    q.listTagStmt,
		roleSeederStmt:                 q.roleSeederStmt,
		staffLoginStmt:                 q.staffLoginStmt,
		staffSeederStmt:                q.staffSeederStmt,
		tagSeederStmt:                  q.tagSeederStmt,
		updateCsConfigStmt:             q.updateCsConfigStmt,
		updateFastMessageStmt:          q.updateFastMessageStmt,
		updateNoticeStmt:               q.updateNoticeStmt,
		updateRemindStmt:               q.updateRemindStmt,
		updateRoleStmt:                 q.updateRoleStmt,
		updateRoomScoreStmt:            q.updateRoomScoreStmt,
		updateRoomStaffStmt:            q.updateRoomStaffStmt,
		updateStaffStmt:                q.updateStaffStmt,
		updateStaffAvatarStmt:          q.updateStaffAvatarStmt,
		updateStaffLoginStmt:           q.updateStaffLoginStmt,
		updateStaffServingStatusStmt:   q.updateStaffServingStatusStmt,
		updateStaffWithPasswordStmt:    q.updateStaffWithPasswordStmt,
		updateTagStmt:                  q.updateTagStmt,
	}
}
