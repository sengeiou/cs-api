// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: report_daily_guest.sql

package model

import (
	"context"
	"time"
)

const createReportDailyGuest = `-- name: CreateReportDailyGuest :exec
INSERT INTO report_daily_guest (` + "`" + `date` + "`" + `, guest_count, created_at)
VALUES (?, ?, ?)
`

type CreateReportDailyGuestParams struct {
	Date       time.Time `db:"date" json:"date"`
	GuestCount int32     `db:"guest_count" json:"guest_count"`
	CreatedAt  time.Time `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateReportDailyGuest(ctx context.Context, arg CreateReportDailyGuestParams) error {
	_, err := q.exec(ctx, q.createReportDailyGuestStmt, createReportDailyGuest, arg.Date, arg.GuestCount, arg.CreatedAt)
	return err
}

const deleteReportDailyGuest = `-- name: DeleteReportDailyGuest :exec
delete from report_daily_guest where date = ?
`

func (q *Queries) DeleteReportDailyGuest(ctx context.Context, date time.Time) error {
	_, err := q.exec(ctx, q.deleteReportDailyGuestStmt, deleteReportDailyGuest, date)
	return err
}

const listReportDailyGuest = `-- name: ListReportDailyGuest :many
select id, date, guest_count, created_at from report_daily_guest where date between ? and ?
`

type ListReportDailyGuestParams struct {
	Date   time.Time `db:"date" json:"date"`
	Date_2 time.Time `db:"date_2" json:"date_2"`
}

func (q *Queries) ListReportDailyGuest(ctx context.Context, arg ListReportDailyGuestParams) ([]ReportDailyGuest, error) {
	rows, err := q.query(ctx, q.listReportDailyGuestStmt, listReportDailyGuest, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportDailyGuest{}
	for rows.Next() {
		var i ReportDailyGuest
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.GuestCount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
