// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: member.sql

package model

import (
	"context"
	"database/sql"
	"time"

	"cs-api/pkg/types"
)

const createMember = `-- name: CreateMember :execresult
INSERT INTO member (type, name, device_id, created_at, updated_at)
VALUES (?, ?, ?, ?, ?)
`

type CreateMemberParams struct {
	Type      types.MemberType `db:"type" json:"type"`
	Name      string           `db:"name" json:"name"`
	DeviceID  string           `db:"device_id" json:"device_id"`
	CreatedAt time.Time        `db:"created_at" json:"created_at"`
	UpdatedAt time.Time        `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (sql.Result, error) {
	return q.exec(ctx, q.createMemberStmt, createMember,
		arg.Type,
		arg.Name,
		arg.DeviceID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const getGuestMember = `-- name: GetGuestMember :one
select id, type, name, device_id, created_at, updated_at
from member
where type = 2
  and device_id = ? LIMIT 1
`

func (q *Queries) GetGuestMember(ctx context.Context, deviceID string) (Member, error) {
	row := q.queryRow(ctx, q.getGuestMemberStmt, getGuestMember, deviceID)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.DeviceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNormalMember = `-- name: GetNormalMember :one
select id, type, name, device_id, created_at, updated_at
from member
where type = 1
  and name = ? LIMIT 1
`

func (q *Queries) GetNormalMember(ctx context.Context, name string) (Member, error) {
	row := q.queryRow(ctx, q.getNormalMemberStmt, getNormalMember, name)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.DeviceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
