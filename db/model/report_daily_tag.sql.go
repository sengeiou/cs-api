// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: report_daily_tag.sql

package model

import (
	"context"
	"time"
)

const createReportDailyTag = `-- name: CreateReportDailyTag :exec
INSERT INTO report_daily_tag (` + "`" + `date` + "`" + `, tag_id, count, created_at)
VALUES (?, ?, ?, ?)
`

type CreateReportDailyTagParams struct {
	Date      time.Time `db:"date" json:"date"`
	TagID     int64     `db:"tag_id" json:"tag_id"`
	Count     int32     `db:"count" json:"count"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateReportDailyTag(ctx context.Context, arg CreateReportDailyTagParams) error {
	_, err := q.exec(ctx, q.createReportDailyTagStmt, createReportDailyTag,
		arg.Date,
		arg.TagID,
		arg.Count,
		arg.CreatedAt,
	)
	return err
}

const deleteReportDailyTag = `-- name: DeleteReportDailyTag :exec
delete from report_daily_tag where date = ?
`

func (q *Queries) DeleteReportDailyTag(ctx context.Context, date time.Time) error {
	_, err := q.exec(ctx, q.deleteReportDailyTagStmt, deleteReportDailyTag, date)
	return err
}

const listReportDailyTag = `-- name: ListReportDailyTag :many
select id, date, tag_id, count, created_at from report_daily_tag where date between ? and ?
`

type ListReportDailyTagParams struct {
	Date   time.Time `db:"date" json:"date"`
	Date_2 time.Time `db:"date_2" json:"date_2"`
}

func (q *Queries) ListReportDailyTag(ctx context.Context, arg ListReportDailyTagParams) ([]ReportDailyTag, error) {
	rows, err := q.query(ctx, q.listReportDailyTagStmt, listReportDailyTag, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportDailyTag{}
	for rows.Next() {
		var i ReportDailyTag
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.TagID,
			&i.Count,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
