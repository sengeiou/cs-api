// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: merchant.sql

package model

import (
	"context"
	"time"

	"cs-api/pkg/types"
)

const checkMerchantKey = `-- name: CheckMerchantKey :one
select id from merchant where ` + "`" + `key` + "`" + ` = ?
`

func (q *Queries) CheckMerchantKey(ctx context.Context, key string) (int64, error) {
	row := q.queryRow(ctx, q.checkMerchantKeyStmt, checkMerchantKey, key)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const countListMerchant = `-- name: CountListMerchant :one
select count(*)
from merchant
where IF(@name is null, 0, name) like IF(@name is null, 0, CONCAT('%', @name, '%')) COLLATE utf8mb4_general_ci
  and IF(@status is null, 0, status) = IF(@status is null, 0, @status)
`

func (q *Queries) CountListMerchant(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countListMerchantStmt, countListMerchant)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMerchant = `-- name: CreateMerchant :exec
INSERT INTO merchant (name, code, ` + "`" + `key` + "`" + `, status, created_by, created_at, updated_by, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateMerchantParams struct {
	Name      string       `db:"name" json:"name"`
	Code      string       `db:"code" json:"code"`
	Key       string       `db:"key" json:"key"`
	Status    types.Status `db:"status" json:"status"`
	CreatedBy int64        `db:"created_by" json:"created_by"`
	CreatedAt time.Time    `db:"created_at" json:"created_at"`
	UpdatedBy int64        `db:"updated_by" json:"updated_by"`
	UpdatedAt time.Time    `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateMerchant(ctx context.Context, arg CreateMerchantParams) error {
	_, err := q.exec(ctx, q.createMerchantStmt, createMerchant,
		arg.Name,
		arg.Code,
		arg.Key,
		arg.Status,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}

const deleteMerchant = `-- name: DeleteMerchant :exec
DELETE
FROM merchant
WHERE id = ?
`

func (q *Queries) DeleteMerchant(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteMerchantStmt, deleteMerchant, id)
	return err
}

const getMerchant = `-- name: GetMerchant :one
SELECT name, code, status
FROM merchant
WHERE id = ? LIMIT 1
`

type GetMerchantRow struct {
	Name   string       `db:"name" json:"name"`
	Code   string       `db:"code" json:"code"`
	Status types.Status `db:"status" json:"status"`
}

func (q *Queries) GetMerchant(ctx context.Context, id int64) (GetMerchantRow, error) {
	row := q.queryRow(ctx, q.getMerchantStmt, getMerchant, id)
	var i GetMerchantRow
	err := row.Scan(&i.Name, &i.Code, &i.Status)
	return i, err
}

const listAvailableMerchant = `-- name: ListAvailableMerchant :many
select id, name
from merchant
where status = 1
`

type ListAvailableMerchantRow struct {
	ID   int64  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

func (q *Queries) ListAvailableMerchant(ctx context.Context) ([]ListAvailableMerchantRow, error) {
	rows, err := q.query(ctx, q.listAvailableMerchantStmt, listAvailableMerchant)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAvailableMerchantRow{}
	for rows.Next() {
		var i ListAvailableMerchantRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMerchant = `-- name: ListMerchant :many
select id, name, code, ` + "`" + `key` + "`" + `, status
from merchant
where IF(@name is null, 0, name) like IF(@name is null, 0, CONCAT('%', @name, '%')) COLLATE utf8mb4_general_ci
  and IF(@status is null, 0, status) = IF(@status is null, 0, @status) limit ?
offset ?
`

type ListMerchantParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

type ListMerchantRow struct {
	ID     int64        `db:"id" json:"id"`
	Name   string       `db:"name" json:"name"`
	Code   string       `db:"code" json:"code"`
	Key    string       `db:"key" json:"key"`
	Status types.Status `db:"status" json:"status"`
}

func (q *Queries) ListMerchant(ctx context.Context, arg ListMerchantParams) ([]ListMerchantRow, error) {
	rows, err := q.query(ctx, q.listMerchantStmt, listMerchant, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMerchantRow{}
	for rows.Next() {
		var i ListMerchantRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Key,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMerchant = `-- name: UpdateMerchant :exec
UPDATE merchant
SET name       = ?,
    code       = ?,
    status     = ?,
    updated_by = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateMerchantParams struct {
	Name      string       `db:"name" json:"name"`
	Code      string       `db:"code" json:"code"`
	Status    types.Status `db:"status" json:"status"`
	UpdatedBy int64        `db:"updated_by" json:"updated_by"`
	UpdatedAt time.Time    `db:"updated_at" json:"updated_at"`
	ID        int64        `db:"id" json:"id"`
}

func (q *Queries) UpdateMerchant(ctx context.Context, arg UpdateMerchantParams) error {
	_, err := q.exec(ctx, q.updateMerchantStmt, updateMerchant,
		arg.Name,
		arg.Code,
		arg.Status,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
