// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: message.sql

package model

import (
	"context"
	"encoding/json"
	"time"

	"cs-api/pkg/types"
)

const countListMessage = `-- name: CountListMessage :one
select count(*)
from message
where IF(@roomId is null, 0, room_id) = IF(@roomId is null, 0, @roomId)
  and IF(@staffId is null, 0, sender_type) = IF(@staffId is null, 0, 2)
  and IF(@staffId is null, 0, sender_id) = IF(@staffId is null, 0, @staffId)
  and IF(@content is null, 0, content) like
      IF(@content is null, 0, CONCAT('%', @content, '%')) COLLATE utf8mb4_general_ci
`

func (q *Queries) CountListMessage(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countListMessageStmt, countListMessage)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMessage = `-- name: CreateMessage :exec
INSERT INTO message (room_id, op_type, sender_type, sender_id, sender_name, content_type, content, extra, ts, created_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateMessageParams struct {
	RoomID      int64                    `db:"room_id" json:"room_id"`
	OpType      types.MessageOpType      `db:"op_type" json:"op_type"`
	SenderType  types.MessageSenderType  `db:"sender_type" json:"sender_type"`
	SenderID    int64                    `db:"sender_id" json:"sender_id"`
	SenderName  string                   `db:"sender_name" json:"sender_name"`
	ContentType types.MessageContentType `db:"content_type" json:"content_type"`
	Content     string                   `db:"content" json:"content"`
	Extra       json.RawMessage          `db:"extra" json:"extra"`
	Ts          int64                    `db:"ts" json:"ts"`
	CreatedAt   time.Time                `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.exec(ctx, q.createMessageStmt, createMessage,
		arg.RoomID,
		arg.OpType,
		arg.SenderType,
		arg.SenderID,
		arg.SenderName,
		arg.ContentType,
		arg.Content,
		arg.Extra,
		arg.Ts,
		arg.CreatedAt,
	)
	return err
}

const listMemberRoomMessage = `-- name: ListMemberRoomMessage :many
select id, room_id, op_type, sender_type, sender_id, sender_name, content_type, content, extra, ts, created_at
from message
where room_id = ?
  and sender_type <> 0
order by ts desc
limit ? offset ?
`

type ListMemberRoomMessageParams struct {
	RoomID int64 `db:"room_id" json:"room_id"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListMemberRoomMessage(ctx context.Context, arg ListMemberRoomMessageParams) ([]Message, error) {
	rows, err := q.query(ctx, q.listMemberRoomMessageStmt, listMemberRoomMessage, arg.RoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.OpType,
			&i.SenderType,
			&i.SenderID,
			&i.SenderName,
			&i.ContentType,
			&i.Content,
			&i.Extra,
			&i.Ts,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMessage = `-- name: ListMessage :many
select id, room_id, op_type, sender_type, sender_id, sender_name, content_type, content, extra, ts, created_at
from message
where IF(@roomId is null, 0, room_id) = IF(@roomId is null, 0, @roomId)
  and IF(@staffId is null, 0, sender_type) = IF(@staffId is null, 0, 2)
  and IF(@staffId is null, 0, sender_id) = IF(@staffId is null, 0, @staffId)
  and IF(@content is null, 0, content) like
      IF(@content is null, 0, CONCAT('%', @content, '%')) COLLATE utf8mb4_general_ci
    limit ?
offset ?
`

type ListMessageParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListMessage(ctx context.Context, arg ListMessageParams) ([]Message, error) {
	rows, err := q.query(ctx, q.listMessageStmt, listMessage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.OpType,
			&i.SenderType,
			&i.SenderID,
			&i.SenderName,
			&i.ContentType,
			&i.Content,
			&i.Extra,
			&i.Ts,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStaffRoomMessage = `-- name: ListStaffRoomMessage :many
select id, room_id, op_type, sender_type, sender_id, sender_name, content_type, content, extra, ts, created_at
from message
where room_id = ?
order by ts desc
limit ? offset ?
`

type ListStaffRoomMessageParams struct {
	RoomID int64 `db:"room_id" json:"room_id"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListStaffRoomMessage(ctx context.Context, arg ListStaffRoomMessageParams) ([]Message, error) {
	rows, err := q.query(ctx, q.listStaffRoomMessageStmt, listStaffRoomMessage, arg.RoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.OpType,
			&i.SenderType,
			&i.SenderID,
			&i.SenderName,
			&i.ContentType,
			&i.Content,
			&i.Extra,
			&i.Ts,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
